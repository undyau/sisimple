// Class automatically generated by Dev-C++ New Class wizard
//
// This event is a singleton

#ifndef CEVENT_H
#define CEVENT_H

#include <wx/string.h>
#include <wx/arrstr.h>
#include "ISubject.h"
#include <vector>
#include <map>
class CSiDetails;
class CResult;
class CCourse;
class wxTextFile;

// Class encapsulating an event
class CEvent : public ISubject
{
	private:
		// class constructor
		CEvent();
        CEvent(CEvent const&);              // Don't Implement
        void operator=(CEvent const&); // Don't implement
		

	public:
		// class destructor
		~CEvent();
		// Singleton access/creation
		static CEvent* Event();
		wxString Directory() {return m_Dir;};
		bool SetDirectory(wxString a_Dir);
		wxString SINamesGlobalFile() {return m_SINamesGlobalFile;};
		
		wxString FindCourseFile(wxString a_Dir) const;
		wxString FindRawDataFile(wxString a_Dir) const;
        wxString FindSINamesFile(wxString a_Dir) const;
		wxString FindSINamesGlobalFile(wxString a_Dir) const;
		wxString LastLogMsg() {return m_LastLogMsg;};
		wxString LastDisplayMsg() {return m_LastDisplayMsg;};
		void GetCourseNames(wxArrayString& a_Names);
		
		void RecalcResults();
		
		CSiDetails* GetSIData(long a_SINumber);
		void LogMsg(wxString a_Msg);
        void LogResultProblem(CResult* a_Result, wxString a_Msg);
        void DisplayMsg(wxString a_Msg);	
        int  CompareCourseIndex(CCourse* a_Lhs, CCourse* a_Rhs);
        CResult* GetResult(long a_RawIndex);
        unsigned int GetCourseCount() {return m_Courses.size();};
        void SetResultCourse(CResult* a_Result, wxString a_CourseName);
        
        void ExportXML(wxString a_File);     
        void SaveResults(wxString a_File);             
        
        bool GetShowSplits();   	
        bool GetShowHTML();        
        void SetShowSplits(bool a_Show);   	
        void SetShowHTML(bool a_Show);  
        wxString GetEventName();
        void SetEventName(wxString a_Name);      


	private:
		bool CanClose();
		
		wxString FindDataFile(wxArrayString& a_Candidates, wxString a_Dir) const;
		void LoadRawData();
		void LoadCourseData();
		void LoadSIData();		
		void LoadSIFile(wxString& a_File);   
        
        void SetCourse(CResult* a_Result); 
        void DisplayRawData();
        void CalcResults();
        void SetPositions(std::vector<CResult*>& a_SortedResults);
        void SetLegStats(std::vector<CResult*>& a_SortedResults); 
        void SetCourseLegStats(CCourse* a_Course, std::vector<CResult*>& a_SortedResults, std::vector<CResult*>::iterator& a_Start, std::vector<CResult*>::iterator& a_End);
        void SetPunchTimes(CResult* a_Result);
        void DisplayTextResults();        
        void DisplayTextSplits();
        void DisplayHTMLSplits();
        void WriteResultLine(wxString a_Text);       

		bool m_Changed;
		bool m_ShowSplits;
		bool m_ShowHTML;
		wxString m_EventName;
		wxString m_Dir;
		wxString m_CourseFile;
		wxString m_RawDataFile;
		wxString m_SINamesFile;				
		wxString m_SINamesGlobalFile;
        wxString m_LastLogMsg;						
        wxString m_LastDisplayMsg;	  
        bool m_SavingResults;
        wxTextFile* m_SaveFile;      
		
		static CEvent* _instance;
		std::vector<CCourse*> m_Courses;
		std::map<long, CSiDetails*> m_SiDetails;
        std::vector<CResult*> m_Results;	
};

#endif // CEVENT_H
